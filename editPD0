#!/usr/bin/perl
#======================================================================
#                    E D I T P D 0 
#                    doc: Mon Nov 25 20:24:31 2013
#                    dlm: Fri Dec 18 20:56:45 2015
#                    (c) 2013 A.M. Thurnherr
#                    uE-Info: 104 1 NIL 0 0 72 2 2 4 NIL ofnI
#======================================================================

# edit RDI PD0 file, e.g. to replace pitch/roll/heading with external values

# HISTORY:
#	Nov 25, 2013: - created
#	Dec 18, 2015: - added switch_beams()
#				  - added -x

$0 =~ m{(.*)/[^/]+}; 
require "$1/RDI_PD0_IO.pl";
require "getopts.pl";

$USAGE = "$0 @ARGV";
die("Usage: $0 " .
	'-e) <edit-file> | -x) <expr> ' .
	"<input file> <output file>\n")
		unless (&Getopts('e:x:') && @ARGV == 2);

die("$0: -e <edit-file> or -x <expr> required\n")
	unless (defined($opt_x) || -r $opt_e);

print(STDERR "Reading $ARGV[0]...");				# read data
readData($ARGV[0],\%dta);
print(STDERR "done\n");

#----------------------------------------------------------------------

print(STDERR "Editing Data...");				

#--------------------------------------------------
# INTERFACE
#	- example <edit_file> entry for external attitude data
#		162     p(3), r(4), h(3.14)
#	- example <edit_file> entry for beam switching
#		*		switch_beams(3,4)
#--------------------------------------------------

sub p($) { $dta{ENSEMBLE}[$e]->{PITCH} = $_[0]; }
sub r($) { $dta{ENSEMBLE}[$e]->{ROLL} = $_[0]; }
sub h($) { $dta{ENSEMBLE}[$e]->{HEADING} = $_[0]; }

sub switch_beams($$)
{
	my($b1,$b2) = @_;

#	print(STDERR "\n entering switch_beams($b1,$b2) for ens = $e...");

	for (my($bin)=0; $bin<$dta{N_BINS}; $bin++) {
		my($tmp) = $dta{ENSEMBLE}[$e]->{VELOCITY}[$bin][$b1-1];
		$dta{ENSEMBLE}[$e]->{VELOCITY}[$bin][$b1-1] = $dta{ENSEMBLE}[$e]->{VELOCITY}[$bin][$b2-1];
		$dta{ENSEMBLE}[$e]->{VELOCITY}[$bin][$b2-1] = $tmp;

		$tmp = $dta{ENSEMBLE}[$e]->{CORRELATION}[$bin][$b1-1];
		$dta{ENSEMBLE}[$e]->{CORRELATION}[$bin][$b1-1] = $dta{ENSEMBLE}[$e]->{CORRELATION}[$bin][$b2-1];
		$dta{ENSEMBLE}[$e]->{CORRELATION}[$bin][$b2-1] = $tmp;

		$tmp = $dta{ENSEMBLE}[$e]->{ECHO_AMPLITUDE}[$bin][$b1-1];
		$dta{ENSEMBLE}[$e]->{ECHO_AMPLITUDE}[$bin][$b1-1] = $dta{ENSEMBLE}[$e]->{ECHO_AMPLITUDE}[$bin][$b2-1];
		$dta{ENSEMBLE}[$e]->{ECHO_AMPLITUDE}[$bin][$b2-1] = $tmp;

		$tmp = $dta{ENSEMBLE}[$e]->{PERCENT_GOOD}[$bin][$b1-1];
		$dta{ENSEMBLE}[$e]->{PERCENT_GOOD}[$bin][$b1-1] = $dta{ENSEMBLE}[$e]->{PERCENT_GOOD}[$bin][$b2-1];
		$dta{ENSEMBLE}[$e]->{PERCENT_GOOD}[$bin][$b2-1] = $tmp;
	}

	return 1;
}

#--------------------------------------------------
# Main Routine
#--------------------------------------------------

if (defined($opt_x)) {
	push(@EE,'*');
	my($id) = ($opt_x =~ m/^([A-Z]+)\s/);										# e.g. PITCH, ROLL, HEADING
	$opt_x = sprintf('$dta{ENSEMBLE}[$e]->{%s}',$id)
		if defined($id);
	push(@EX,$opt_x);
}		

if (defined($opt_e)) {
	open(EF,$opt_e) || die("$opt_e: $!\n");
	while (<EF>) {
		s/\#.*//;
		next if m/^\s+$/;
		my($ens,$expr) = m/^\s*(\*|\d+)\s+(.*)$/;
	
		my($id) = ($expr =~ m/^([A-Z]+)\s/);										# e.g. PITCH, ROLL, HEADING
		$expr = sprintf('$dta{ENSEMBLE}[$e]->{%s}',$id)
			if defined($id);
		    
		push(@EE,$ens);
		push(@EX,$expr);
	}
	close(EF);
}

for (local($e)=my($eei)=0; $e<@{$dta{ENSEMBLE}}; $e++) {						# local() needed for p(), r(), h()
#	print(STDERR "\n\@ens=$EE[$eei]: $EX[$eei]\n");
	if ($EE[$eei] eq '*' || $EE[$eei] == $dta{ENSEMBLE}[$e]->{NUMBER}) {		# match => edit
#		print(STDERR "\n\@ens=$EE[$eei]: $EX[$eei]");
		eval($EX[$eei]) || die("$@ while executing <$EX[$eei]>\n");
	} elsif ($EE[$eei] > $dta{ENSEMBLE}[$e]->{NUMBER}) {						# next edit later in file => skip
		next;
	} else {																	# need next edit
		$eei++;
		last if ($eei >= @EE);
		redo;
	}
}

print(STDERR "done\n");

#----------------------------------------------------------------------

print(STDERR "Writing $ARGV[1]...");				# write data
writeData($ARGV[1],\%dta);
print(STDERR "done\n");

exit(0);
